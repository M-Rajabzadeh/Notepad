## 03 - Creating Databases & Tables

-- for ingore a line in code


SELECT * FROME cats;                    Select all table
show databases;                         Show databases
CREATE DATABASE <name>;                 Create database
DROP DATABASE <name>;                   Delete database
USE <database name>;                    open database
SELECT database();                      current database
varchar (100) maximum (text)


CREATE TABLE <name> (
    name VARCHAR(50),
    breed VARCHAR(50),
    age INT
);


SHOW tables;

SHOW COLUMNS FROM <table name>;
          or
DESC <table name>;
          or
DESCRIBE <table name>;




## 04 - Inserting Data


CREATE TABLE <cats> (
    name VARCHAR(50),
    age INT
);


-- Single Insert:

INSERT INTO <cats> (name, age)
VALUES ('Blue Steele', 5);

-- Multiple Insert:

INSERT INTO <cats> (name, age)
VALUES
  ('Meatball', 5),
  ('Turkey', 1),
  ('Potato Face', 15);


-- Using NOT NULL: Force user to write somthing for fill 2 value

CREATE TABLE cats2 (
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL
);


Quotation Note:

('Nika\'s apple');     instead     ('Nika's apple')
('She said "haha"');   is fine



-- Define a table with a DEFAULT name specified:

CREATE TABLE cats3  (
    name VARCHAR(20) DEFAULT 'unnamed',
    age INT DEFAULT 99
);


-- Combine NOT NULL and DEFAULT:

CREATE TABLE cats4  (
    name VARCHAR(20) NOT NULL DEFAULT 'unnamed',
    age INT NOT NULL DEFAULT 99
);

-- One way of specifying a PRIMARY KEY

CREATE TABLE unique_cats (
	cat_id INT NOT NULL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL
);

-- Another option:

CREATE TABLE unique_cats2 (
	cat_id INT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    PRIMARY KEY (cat_id)
);


--  AUTO_INCREMENT

CREATE TABLE unique_cats3 (
    cat_id INT AUTO_INCREMENT PRIMARY KEY ,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
);

-- Another option:

CREATE TABLE unique_cats3 (
    cat_id INT AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    PRIMARY KEY (cat_id)
);

-----------------------------------------------------------
## Some Example
-- Defining employees table

CREATE TABLE employees (
    id INT AUTO_INCREMENT,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed',
    PRIMARY KEY(id)
);
-- Another way of defining the primary key:



CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed'
);
-- A test INSERT:



INSERT INTO employees(first_name, last_name, age) VALUES
('Dora', 'Smith', 58);
-----------------------------------------------------------
## 05 - CRUD Basics
CRUD   -->    CREATE - READ - UPDATE - DELETE

-- SELECT <option1>, <option2> FROM cats;

-- SELECT * FROM cats WHERE age = 4;
-- SELECT name FROM cats WHERE age = 4;
# upper case and lower case dosent matter in result

-- SELECT * FROM cats WHERE cat_id=age;     IS POSSIBLE

# Use 'AS' to alias a column in your results
(it doesn't actually change the name of the column in the table)
-- SELECT cat_id AS id, name FROM cats;

# CODE: Updating Data
UPDATE cats SET age=14 WHERE name='Misty';
UPDATE cats SET age=14;    !!!   UPDATE ALL CASTS AS SAME AGE

-- Delete all cats with name of 'Egg':
DELETE FROM cats WHERE name='Egg';

-- Delete all rows in the cats table:
DELETE FROM cats;

## CONCAT & CONCAT_WS
-- SELECT CONCAT('pi', 'ckle');
   SELECT CONCAT(author_fname,' ', author_lname) AS author_name FROM books;

-- SELECT CONCAT_WS('-',title, author_fname, author_lname) FROM books;


## SUBSTRING or SUBSTR

SELECT SUBSTRING('Hello World', 1, 4);
SELECT SUBSTRING('Hello World', 7);
SELECT SUBSTRING('Hello World', -3);
SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;
SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;


## Combining CONCAT & SUBSTRING
    (
        SUBSTRING(title, 1, 10),
        '...'
    ) AS 'short title'
FROM books;


## Replace
REPLACE(str, from_str, to_str)

SELECT REPLACE('Hello World', 'Hell', '%$#@');
SELECT REPLACE('Hello World', 'l', '7');
SELECT REPLACE('Hello World', 'o', '0');
SELECT REPLACE('HellO World', 'o', '*');
SELECT REPLACE('cheese bread coffee milk', ' ', ' and ');
SELECT REPLACE(title, 'e ', '3') FROM books;
SELECT REPLACE(title, ' ', '-') FROM books;

## Reverse
SELECT REVERSE('Hello World');
SELECT REVERSE('meow meow');
SELECT REVERSE(author_fname) FROM books;
SELECT CONCAT('woof', REVERSE('woof'));
SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;

## Char length
SELECT CHAR_LENGTH('Hello World');
SELECT CHAR_LENGTH(title) as length, title FROM books;
SELECT author_lname, CHAR_LENGTH(author_lname) AS 'length' FROM books;
SELECT CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') FROM books;

## Upper & Lower or UCASE & LCASE
SELECT UPPER('Hello World');
SELECT LOWER('Hello World');
SELECT UPPER(title) FROM books;
SELECT CONCAT('MY FAVORITE BOOK IS ', UPPER(title)) FROM books;
SELECT CONCAT('MY FAVORITE BOOK IS ', LOWER(title)) FROM books;

## Insert
## Left
## Repeat
## Trim

##

## Distinct (Duplicate)
SELECT author_lname FROM books;
SELECT DISTINCT author_lname FROM books;
SELECT author_fname, author_lname FROM books;
SELECT DISTINCT CONCAT(author_fname,' ', author_lname) FROM books;
SELECT DISTINCT author_fname, author_lname FROM books;

## Order by & DESC & ASC & number
SELECT * FROM books
ORDER BY author_lname;

SELECT * FROM books
ORDER BY author_lname DESC;

SELECT * FROM books
ORDER BY released_year;

SELECT book_id, author_fname, author_lname, pages
FROM books ORDER BY 2 desc;

SELECT book_id, author_fname, author_lname, pages
FROM books ORDER BY author_lname, author_fname;

## Limit
SELECT title FROM books LIMIT 3;

SELECT * FROM books LIMIT 1;

SELECT title, released_year FROM books
ORDER BY released_year DESC LIMIT 5;

SELECT title, released_year FROM books
ORDER BY released_year DESC LIMIT 0,5;

SELECT title FROM books LIMIT 5, 1234;

## Like
SELECT title, author_fname, author_lname, pages
FROM books
WHERE author_fname LIKE '%da%';

SELECT title, author_fname, author_lname, pages
FROM books
WHERE title LIKE '%:%';

SELECT * FROM books
WHERE author_fname LIKE '____';

SELECT * FROM books
WHERE author_fname LIKE '_a_';

## Advance Like
-- To select books with '%' in their title:

SELECT * FROM books
WHERE title LIKE '%\%%';

-- To select books with an underscore '_' in title:

SELECT * FROM books
WHERE title LIKE '%\_%';

## COUNT
SELECT COUNT(*) FROM books;
SELECT COUNT(author_lname) FROM books;
SELECT COUNT(DISTINCT author_lname) FROM books;

## Group
SELECT author_lname, COUNT(*)
FROM books
GROUP BY author_lname;

SELECT
    author_lname, COUNT(*) AS books_written
FROM
    books
GROUP BY author_lname
ORDER BY books_written DESC;

## MIN & MAX
SELECT MAX(pages) FROM books;
SELECT MIN(author_lname) FROM books;

## SUM
SELECT SUM(pages) FROM books;

SELECT author_lname, COUNT(*), SUM(pages)
FROM books
GROUP BY author_lname;

## AVG
SELECT AVG(pages) FROM books;

SELECT AVG(released_year) FROM books;

SELECT
    released_year,
    AVG(stock_quantity),
    COUNT(*) FROM books
GROUP BY released_year;

## Data types ##

-- CHAR & VARCHAR
https://dev.mysql.com/doc/refman/8.0/en/char.html

-- INT (Sighned & Unsighned)
https://dev.mysql.com/doc/refman/8.0/en/integer-types.html

-- Decimal
https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html

-- Float & Double
https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html

-- DATE, DATETIME, and TIMESTAMP Types
https://dev.mysql.com/doc/refman/8.0/en/datetime.html

## Date practice
CREATE TABLE people (
	name VARCHAR(100),
    birthdate DATE,
    birthtime TIME,
    birthdt DATETIME
);

INSERT INTO people (name, birthdate, birthtime, birthdt)
VALUES ('Elton', '2000-12-25', '11:00:00', '2000-12-25 11:00:00');


## CURDATE, CURTIME, & NOW
SELECT CURTIME();
SELECT CURDATE();
SELECT NOW();

INSERT INTO people (name, birthdate, birthtime, birthdt)
VALUES ('Hazel', CURDATE(), CURTIME(), NOW());

## Date function
https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html

SELECT
    birthdate,
    DAY(birthdate),
    DAYOFWEEK(birthdate),
    DAYOFYEAR(birthdate)
FROM people;

SELECT
    birthdate,
    MONTHNAME(birthdate),
    YEAR(birthdate)
FROM people;

## Date format
https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format

SELECT birthdate, DATE_FORMAT(birthdate, '%a %b %D') FROM people;
SELECT birthdt, DATE_FORMAT(birthdt, '%H:%i') FROM people;
SELECT birthdt, DATE_FORMAT(birthdt, 'BORN ON: %r') FROM people;

## Date math
-- DATEDIFF
https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_datediff

## TIMRSTAMP
https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_timestamp

CREATE TABLE captions (
  text VARCHAR(150),
  created_at TIMESTAMP default CURRENT_TIMESTAMP
);

CREATE TABLE captions2 (
  text VARCHAR(150),
  created_at TIMESTAMP default CURRENT_TIMESTAMP,
  updated_at TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

## Logic Operator ##

SELECT * FROM books
WHERE released_year != 2017;

SELECT * FROM books
WHERE title NOT LIKE '%e%';

SELECT * FROM books
WHERE pages > 500;

SELECT * FROM books
WHERE released_year <= 1985;

-- AND

SELECT title, author_lname, released_year FROM books
WHERE released_year > 2010
AND author_lname = 'Eggers';

SELECT title, author_lname, released_year FROM books
WHERE released_year > 2010
AND author_lname = 'Eggers'
AND title LIKE '%novel%';

-- OR

SELECT title, pages FROM books
WHERE CHAR_LENGTH(title) > 30
AND pages > 500;

SELECT title, author_lname FROM books
WHERE author_lname='Eggers' AND
released_year > 2010;

SELECT title, author_lname, released_year FROM books
WHERE author_lname='Eggers' OR
released_year > 2010;


SELECT title, pages FROM books
WHERE pages < 200
OR title LIKE '%stories%';

-- BETWEEN

SELECT title, released_year FROM books
WHERE released_year <= 2015
AND released_year >= 2004;

SELECT title, released_year FROM books
WHERE released_year BETWEEN 2004 AND 2014;

## Compare AND & OR & BETWEEN

SELECT * FROM people WHERE birthtime
BETWEEN CAST('12:00:00' AS TIME)
AND CAST('16:00:00' AS TIME);


SELECT * FROM people WHERE HOUR(birthtime)
BETWEEN 12 AND 16;

-- IN

SELECT title, author_lname FROM books
WHERE author_lname = 'Carver'
OR author_lname = 'Lahiri'
OR author_lname = 'Smith';

SELECT title, author_lname FROM books
WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');

SELECT title, author_lname FROM books
WHERE author_lname NOT IN ('Carver', 'Lahiri', 'Smith');


SELECT title, released_year FROM books
WHERE released_year >= 2000
AND released_year % 2 = 1;

-- CASE

SELECT title, released_year,
CASE
	WHEN released_year >= 2000 THEN 'modern lit'
    ELSE '20th century lit'
END AS genre
FROM books;


SELECT
    title,
    stock_quantity,
    CASE
        WHEN stock_quantity BETWEEN 0 AND 40 THEN '*'
        WHEN stock_quantity BETWEEN 41 AND 70 THEN '**'
        WHEN stock_quantity BETWEEN 71 AND 100 THEN '***'
        WHEN stock_quantity BETWEEN 101 AND 140 THEN '****'
        ELSE '*****'
    END AS stock
FROM
    books;


SELECT
    title,
    stock_quantity,
    CASE
        WHEN stock_quantity <= 40 THEN '*'
        WHEN stock_quantity <= 70 THEN '**'
        WHEN stock_quantity <= 100 THEN '***'
        WHEN stock_quantity <= 140 THEN '****'
        ELSE '*****'
    END AS stock
FROM
    books;

## How to find NULLs and Delete them

SELECT * FROM books WHERE author_lname IS NULL;
Delete  FROM books WHERE title IS NULL;
Delete * FROM books WHERE title IS NULL;

## Unique ##
CREATE TABLE contacts (
	name VARCHAR(100) NOT NULL,
    phone VARCHAR(15) NOT NULL UNIQUE
);

INSERT INTO contacts (name, phone)
VALUES ('billybob', '8781213455');

-- This insert would result in an error:
INSERT INTO contacts (name, phone)
VALUES ('billybob', '8781213455');

## CHECK
CREATE TABLE users (
	username VARCHAR(20) NOT NULL,
    age INT CHECK (age > 0)
);

CREATE TABLE palindromes (
  word VARCHAR(100) CHECK(REVERSE(word) = word)
)

## CONSTRAINT
CREATE TABLE users2 (
    username VARCHAR(20) NOT NULL,
    age INT,
    CONSTRAINT age_not_negative CHECK (age >= 0)
);

CREATE TABLE palindromes2 (
  word VARCHAR(100),
  CONSTRAINT word_is_palindrome CHECK(REVERSE(word) = word)
);

## Multi Column Cecks
CREATE TABLE companies (
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    CONSTRAINT name_address UNIQUE (name , address)
);

CREATE TABLE houses (
  purchase_price INT NOT NULL,
  sale_price INT NOT NULL,
  CONSTRAINT sprice_gt_pprice CHECK(sale_price >= purchase_price)
);

## ADD COLUMN
ALTER TABLE companies
ADD COLUMN phone VARCHAR(15);

ALTER TABLE companies
ADD COLUMN employee_count INT NOT NULL DEFAULT 1;

## DROP Column
ALTER TABLE companies DROP COLUMN phone;

## RENAME TABLE & COLUMN
-- RENAME TABLE companies to suppliers;

-- ALTER TABLE suppliers RENAME TO companies;

ALTER TABLE companies
RENAME COLUMN name TO company_name;

## MODIFY
ALTER TABLE companies
MODIFY company_name VARCHAR(100) DEFAULT 'unknown';

ALTER TABLE suppliers
CHANGE business biz_name VARCHAR(50);

## ALTER TABLE  Constraints
ALTER TABLE houses
ADD CONSTRAINT positive_pprice CHECK (purchase_price >= 0);

ALTER TABLE houses DROP CONSTRAINT positive_pprice;




## Foreign key ##
CREATE TABLE customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(50)
);

CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

INSERT INTO customers (first_name, last_name, email)
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');


INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016-02-10', 99.99, 1),
       ('2017-11-11', 35.50, 1),
       ('2014-12-12', 800.67, 2),
       ('2015-01-03', 12.50, 2),
       ('1999-04-11', 450.25, 5);